package eu.uqasar.model.qmtree;

/*
 * #%L
 * U-QASAR
 * %%
 * Copyright (C) 2012 - 2015 U-QASAR Consortium
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import java.util.List;

import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlRootElement;

import lombok.Getter;
import lombok.Setter;
import org.codehaus.jackson.annotate.JsonCreator;
import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.annotate.JsonProperty;
import org.codehaus.jackson.annotate.JsonTypeInfo;
import org.codehaus.jackson.annotate.JsonTypeInfo.As;
import org.codehaus.jackson.annotate.JsonTypeInfo.Id;
import org.hibernate.search.annotations.Indexed;

import de.agilecoders.wicket.core.markup.html.bootstrap.image.IconType;
import eu.uqasar.model.measure.MetricSource;
import eu.uqasar.model.measure.Scale;
import eu.uqasar.model.measure.Unit;

@Setter
@Getter
@Entity
@XmlRootElement
@Indexed
@JsonTypeInfo(use = Id.CLASS, include = As.PROPERTY, property = "@class")
public class QMMetric extends QMBaseIndicator {

	private static final long serialVersionUID = 6450458144698267576L;
	
	public static final IconType ICON = new IconType("signal");

	private MetricSource source = MetricSource.Manual;

	private Scale scale = Scale.Ordinal;

	private Unit unit = Unit.Unity;

	@JsonCreator
	public QMMetric(
			@JsonProperty("name") final String name,
			@JsonProperty("children") final List<QMMetric> children,
			@JsonProperty("description") final String description,
			@JsonProperty("lowerLimit") final float lowerLimit,
			@JsonProperty("scale") final Scale scale,
			@JsonProperty("source") final MetricSource source,
			@JsonProperty("targetValue") final float targetValue,
			@JsonProperty("unit") final Unit unit,
			@JsonProperty("upperLimit") final float upperLimit,
			@JsonProperty("weight") final float weight) {
		
		this.setName(name);
		this.setDescription(description);
		this.setCompleted(true);
		this.setLowerLimit((double) lowerLimit);
		this.setScale(scale);
		this.setSource(source);
		this.setTargetValue(targetValue);
		this.setUnit(unit);
		this.setUpperLimit((double) upperLimit);
		this.setWeight(weight);
	}
	
	public QMMetric() {
		this.setCompleted(true);
	}
	
	public QMMetric(final String name, final QMQualityIndicator parent) {
		super(parent);
		this.setName(name);
		this.setCompleted(true);
	}

	/**
	 * Constructor for creating a copy of entity QMMetric.
	 * @param copy QMMetric
	 */
	public QMMetric(final QMMetric copy) {
		super(copy.getParent());
		this.setDescription(copy.getDescription());
		this.setCompleted(true);
		//TODO REVIEW AUTOGENERATED? this.setKey("0");
		this.setLowerLimit(copy.getLowerLimit());
		this.setName("Copy of "+copy.getName());
		this.setTargetValue(copy.getTargetValue());
		this.setScale(copy.getScale());
		this.setSource(copy.getSource());
		this.setTargetValue(copy.getTargetValue());
		this.setUnit(copy.getUnit());
		this.setUpperLimit(copy.getUpperLimit());
		this.setWeight(copy.getWeight());
		this.setQModelTagData(copy.getQModelTagData());
	}
	
	@JsonIgnore
	@Override
	public IconType getIconType() {
		return ICON;
	}

	@JsonIgnore
	public QMQualityIndicator getQMQualityIndicator() {
		return (QMQualityIndicator) getParent();
	}
	
	@JsonIgnore
	public QMQualityObjective getQMQualityObjective() {
		return (QMQualityObjective) getParent().getParent();
	}

}