package eu.uqasar.model.tree;

/*
 * #%L
 * U-QASAR
 * %%
 * Copyright (C) 2012 - 2015 U-QASAR Consortium
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */


import java.util.List;

import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.codehaus.jackson.annotate.JsonCreator;
import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.annotate.JsonProperty;
import org.codehaus.jackson.annotate.JsonTypeInfo;
import org.codehaus.jackson.annotate.JsonTypeInfo.As;
import org.codehaus.jackson.annotate.JsonTypeInfo.Id;
import org.hibernate.search.annotations.Indexed;

import de.agilecoders.wicket.core.markup.html.bootstrap.image.IconType;
import eu.uqasar.model.lifecycle.LifeCycleStage;
import eu.uqasar.model.measure.MetricSource;
import eu.uqasar.model.qmtree.QMMetric;
import eu.uqasar.model.quality.indicator.Purpose;
@NoArgsConstructor
@Setter
@Getter
@Entity
@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
@Indexed
@XmlType(propOrder = { "name", "description", "indicatorPurpose",
		"lifeCycleStage", "metricSource", "metricType",
		"targetValue", "threshold", "unit", "value", "weight",
		"children" })
@JsonTypeInfo(use = Id.CLASS, include = As.PROPERTY, property = "@class")
public class Metric extends BaseIndicator {

	private static final long serialVersionUID = 6450458144698267576L;
	public static final IconType ICON = new IconType("signal");

	private String metricType;

	private String unit = "Unit";

	@XmlTransient
	@ManyToOne
	private QMMetric qmMetric;

	@JsonCreator
	public Metric(
			@JsonProperty("name") final String name,
			@JsonProperty("children") final List<Metric> children,
			@JsonProperty("description") final String description,
			@JsonProperty("indicatorPurpose") final Purpose indicatorPurpose,
			@JsonProperty("lifeCycleStage") final LifeCycleStage lifeCycleStage,
			@JsonProperty("metricSource") final MetricSource metricSource,
			@JsonProperty("metricType") final String metricType,
			@JsonProperty("targetValue") final float targetValue,
			@JsonProperty("threshold") final Threshold threshold,
			@JsonProperty("unit") final String unit,
			@JsonProperty("value") final float value,
			@JsonProperty("weight") final float weight) {

		this.setName(name);
		this.setDescription(description);
		this.setIndicatorPurpose(indicatorPurpose);
		this.setLifeCycleStage(lifeCycleStage);
		this.setMetricSource(metricSource);
		this.setMetricType(metricType);
		this.setTargetValue(targetValue);
		this.setThreshold(threshold);
		this.setUnit(unit);
		this.setValue(value);
		this.setWeight(weight);
	}

	public Metric(final String name, final QualityIndicator parent) {
		super(parent);
		this.name = name;
	}

	public Metric(final QMMetric qmm, final QualityIndicator parent) {
		this(qmm.getName(), parent);
		this.setQmMetric(qmm);
		this.getThreshold().setLowerAcceptanceLimit(qmm.getLowerLimit());
		this.getThreshold().setUpperAcceptanceLimit(qmm.getUpperLimit());
		this.setTargetValue(qmm.getTargetValue());
		this.setWeight(qmm.getWeight());
		this.setMetricSource(qmm.getSource());
	}

	/**
	 * Constructor for creating a copy of entity Metric.
	 * @param copy Metric
	 */
	public Metric(final Metric copy) {
		super(copy.getParent());
		this.setDescription(copy.getDescription());
		// TODO REVIEW AUTOGENERATED? this.setKey("0");
		this.setIndicatorPurpose(copy.getIndicatorPurpose());
		this.setLifeCycleStage(copy.getLifeCycleStage());
		this.getThreshold().setLowerAcceptanceLimit(copy.getThreshold().getLowerAcceptanceLimit());
		this.setMetricSource(copy.getMetricSource());
		this.setMetricType(copy.getMetricType());
		this.setName("Copy of " + copy.getName());
		this.setTargetValue(copy.getTargetValue());
		this.setUnit(copy.getUnit());
		this.getThreshold().setUpperAcceptanceLimit(copy.getThreshold().getUpperAcceptanceLimit());
		this.setWeight(copy.getWeight());
		this.setValue(copy.getValue());
	}

	@JsonIgnore
	@Override
	public IconType getIconType() {
		return ICON;
	}

	@JsonIgnore
	@Override
	public QualityIndicator getQualityIndicator() {
		return (QualityIndicator) getParent();
	}

	@JsonIgnore
	@Override
	public QualityObjective getQualityObjective() {
		return (QualityObjective) getParent().getParent();
	}

	@JsonIgnore
	@Override
	public Class<TreeNode> getChildType() {
		return TreeNode.class;
	}

	@XmlElement(name = "indicatorPurpose")
	public Purpose getIndicatorPurpose() {
		return super.getIndicatorPurpose();
	}

	@XmlElement(name = "lifeCycleStage")
	public LifeCycleStage getLifeCycleStage() {
		return super.getLifeCycleStage();
	}

	@XmlElement(name = "metricSource")
	public MetricSource getMetricSource() {
		return super.getMetricSource();
	}

}
